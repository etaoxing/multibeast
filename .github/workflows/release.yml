name: Release

on:
  push:
    tags:
      - '*.*.*'

jobs:
  build:
    name: Build release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 20.04 supports CUDA 11.0+
          - os: ubuntu-20.04
            gcc: 10
            cuda: 11.1
            cuda-version: cu111
            python-version: 3.7
            torch-version: 1.9.1
            torchvision-version: 0.10.1

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
        run: .github/action-scripts/install_cuda_ubuntu.sh
        shell: bash

      # Specify the correct host compilers
      - name: Install/Select gcc and g++ 
        run: |
          sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
          echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
          echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install PyTorch ${{ matrix.torch-version }}, CUDA ${{ matrix.cuda }}
        run: |
          pip install torch==${{ matrix.torch-version}}+${{ matrix.cuda-version}} \
            torchvision==${{ matrix.torchvision-version}}+${{ matrix.cuda-version}} \
            -f https://download.pytorch.org/whl/torch_stable.html

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Build package
        run: |
          RELEASE_BUILD=1 python setup.py bdist_wheel sdist

      - name: Upload package distribution files
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: dist

  deploy:
    name: Deploy release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - uses: actions/checkout@v3

      - name: Download package distribution files
        uses: actions/download-artifact@v3
        with:
          name: package
          path: dist

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Publish package to PyPI
        run: |
          twine upload -u __token__ -p ${{ secrets.PYPI_TOKEN }} dist/*
